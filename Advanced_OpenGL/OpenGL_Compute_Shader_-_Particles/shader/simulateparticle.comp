#version 430 core

layout (local_size_x = 1000, local_size_y = 1, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// Uniforms
//
// ----------------------------------------------------------------------------

layout (location = 0) uniform float Dt;                 /**< Zeitdifferenz zum letzen Berechnungsschritt */
layout (location = 1) uniform vec2 FramebufferSize;     /**< Größe des Framebuffers */
layout (location = 2) uniform vec2 Attractor;           /**< Anziehungspunkt */
layout (location = 3) uniform float AttractorForce;     /**< Multiplikator für die Geschwindigkeit zum Anziehungspunkt */

/** Buffer für die Positionen der Partikel */
layout (std430, binding = 0) buffer PositionBuffer {
    vec2 positions[];
};

/** Buffer für die Geschwindigkeiten der Partikel */
layout (std430, binding = 1) buffer VelocitiesBuffer {
    vec2 velocities[];
};

// ----------------------------------------------------------------------------
//
// Funktionen
//
// ----------------------------------------------------------------------------

/**
 * Berechnet auf Basis eines 2D-Vektors einen Zufallswert
 *
 * @param xi                    2D-Vektor als Grundlage des Zufallswertes
 *
 * @return Zufallswert
 */
float rand(vec2 xi){
    return fract(sin(dot(xi.xy, vec2(12.9898,78.233))) * 43758.5453);
}


/**
 * Einsprungpunkt für den Compute Shader
 */
void main() {
    // Position und Geschwindigkeit aus Shader Storage Buffer lesen
    vec2 position = positions[gl_GlobalInvocationID.x];
    vec2 velocity = velocities[gl_GlobalInvocationID.x];

    // Geschwindigkeit zum Anziehungspunkt berechnen
    vec2 attractorVector = Attractor - position;
    float attractorDistance = length(attractorVector);
    vec2 attractorVelocity = 50000*normalize(attractorVector) / max(0.5, attractorDistance);

    // Zufällige Geschwindigkeit berechnen
    vec2 randomVelocity = 2*vec2(rand(attractorVector + gl_GlobalInvocationID.xy)) - vec2(1);

    // Drehgeschwindigkeit berechnen
    vec2 rotationalVelocity = cross(vec3(attractorVector, 0), vec3(0, 0, 1)).xy;
    rotationalVelocity = smoothstep(100, 0, attractorDistance)*rotationalVelocity;

    // Trägheit der Partikel simulieren
    velocity = mix(velocity, AttractorForce*(attractorVelocity + rotationalVelocity + 5*randomVelocity), 0.05);

    // Randbehandlung
    {
        if (position.x < 0) {
            velocity.x *= -1;
            position.x = 0;
        } else if (position.x > FramebufferSize.x) {
            velocity.x *= -1;
            position.x = FramebufferSize.x;
        }

        if (position.y < 0) {
            velocity.y *= -1;
            position.y = 0;
        } else if (position.y > FramebufferSize.y) {
            velocity.y *= -1;
            position.y = FramebufferSize.y;
        }
    }

    // Neue Position berechnen
    position = position + Dt*velocity;

    // Position und Geschwindigkeit in Shader Storage Buffer schreiben
    positions[gl_GlobalInvocationID.x] = position;
    velocities[gl_GlobalInvocationID.x] = velocity;
}



