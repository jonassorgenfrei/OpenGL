#version 430 core

layout (local_size_x = 1, local_size_y = 1) in;

layout (location = 0) uniform int VerticesPerRow;
layout (location = 1) uniform float Dt;
layout (location = 2) uniform float T;

/** Buffer für die Positionen der Partikel */
layout (std430, binding = 0) buffer PositionsFrontBuffer {
    vec4 positionsFront[];
};

/** Buffer für die Positionen der Partikel */
layout (std430, binding = 1) buffer PositionsBackBuffer {
    vec4 positionsBack[];
};

struct Normal {
    float x, y, z;
};

/** Buffer für die Positionen der Partikel */
layout (std430, binding = 2) buffer NormalsFrontBuffer {
    Normal normalsFront[];
};

/** Buffer für die Positionen der Partikel */
layout (std430, binding = 3) buffer NormalsBackBuffer {
    vec4 normalsBack[];
};


// ----------------------------------------------------------------------------
//
// Funktionen
//
// ----------------------------------------------------------------------------

int linearIndex(uvec2 position) {
    return int(position.y*VerticesPerRow + position.x);
}

uint clampedIndex(uvec2 location) {
        return linearIndex(uvec2(
                max(0, min(VerticesPerRow - 1, location.x)),
                max(0, min(VerticesPerRow - 1, location.y))));
}

float wave(vec2 position, vec2 direction, float frequency) {
    return sin(T + frequency*dot(position, direction));
}

float waterHeight(vec2 position) {
    return
        0.05*wave(position, vec2(1, 1), 0.6) +
        0.05*wave(position, vec2(1, 0.7), 0.07) +
        0.05*wave(position, vec2(0.3, 0.6), 0.02) +
        0.05*wave(position, vec2(0.6, 0.3), 0.3);
}


/**
 * Einsprungpunkt für den Compute Shader
 */
void main() {
	vec4 position = positionsFront[linearIndex(gl_GlobalInvocationID.xy)];

    vec3 positionLeft  = positionsFront[clampedIndex(gl_GlobalInvocationID.xy + uvec2(-1,  0))].xyz;
    vec3 positionRight = positionsFront[clampedIndex(gl_GlobalInvocationID.xy + uvec2( 1,  0))].xyz;
    vec3 positionDown  = positionsFront[clampedIndex(gl_GlobalInvocationID.xy + uvec2( 0, -1))].xyz;
    vec3 positionUp    = positionsFront[clampedIndex(gl_GlobalInvocationID.xy + uvec2( 0,  1))].xyz;

	vec3 edgeHorizontal = positionRight - positionLeft;
    vec3 edgeVertical   = positionUp    - positionDown;

    vec3 normal = normalize(cross(edgeHorizontal, edgeVertical));

    float c = 0.1;
    float h = 2.0 / float(VerticesPerRow);

	 // Simulation
    {
        // f = c^2*(u[i+1,j]+u[i-1,j]+u[i,j+1]+u[i,j-1] – 4u[i,j])/h^2
        float f = c * c * (positionLeft.y + positionRight.y + positionDown.y + positionUp.y - 4.0 * position.y) / (h * h);
        // v[i,j] = v[i,j] + f*delta(t)
        position.w = position.w + f * Dt;
        // unew[i,j] = u[i,j] + v[i]*delta(t)
        position.y = position.y + position.w * Dt;
    }
	
    // Waves
    if (false) {
        position.y = waterHeight(gl_GlobalInvocationID.xy);
    }

    //position.y += Dt*(-0.001 + 0.002*rand(gl_GlobalInvocationID.xy));

    // Attenuation
    position.w *= 0.997;

    if ((int(T) % 8 == 0 && gl_GlobalInvocationID.x >= 50 && gl_GlobalInvocationID.x <= 55 && gl_GlobalInvocationID.y >= 50 && gl_GlobalInvocationID.y <= 55) ||
        (int(T) % 3 == 0 && gl_GlobalInvocationID.x >= 30 && gl_GlobalInvocationID.x <= 35 && gl_GlobalInvocationID.y >= 70 && gl_GlobalInvocationID.y <= 75)) {
        position.y = 0.05;
    }

    positionsFront[linearIndex(gl_GlobalInvocationID.xy)] = position;

    Normal n;
    n.x = normal.x;
    n.y = normal.y;
	n.z = normal.z;
	normalsFront[linearIndex(gl_GlobalInvocationID.xy)] = n;
}
