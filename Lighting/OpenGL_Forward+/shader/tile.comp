#version 430 core

// ----------------------------------------------------------------------------
//
// Makros
//
// ----------------------------------------------------------------------------

// max count of lights
#define NUM_LIGHTS 100
// max sides of the  Frusta
#define NUM_FRUSTUM_SIDES 4
// number of positions for Debugging, that are used per tile
#define NUM_DEBUG_POSITIONS 24
// compile debugging informationen
#define DEBUGGING

// ----------------------------------------------------------------------------
//
// Workgroup-Definition
//
// ----------------------------------------------------------------------------

layout (local_size_x = NUM_LIGHTS) in;

// ----------------------------------------------------------------------------
//
// Types
//
// ----------------------------------------------------------------------------

 /**
  * Isotropic Pointlight
  * Pointlight data is stored in a buffer object
  * NOTE: consider Memory Layout
  */
struct PointLight {
    vec3 position;
    float radius;
    vec4 color;
};

// ----------------------------------------------------------------------------
//
// Uniforms
//
// ----------------------------------------------------------------------------

/**
 * Light Data buffer
 * contains data of lights 
 */
layout (std430, binding = 0) buffer LightsBuffer {
    PointLight lights[];
};

/**
 * @brief Buffer with indices of visiblie lights
 *
 * Buffer includes for every tile the indices of the lights overlapping the
 * truncated pyramid
 *
 * Layout:
 *
 * Tile 1                  Tile 2
 * |                         |
 * v                         v
 * +---+---+---+---+-----+---+-------
 * | N | 0 | 1 | 2 | ... | K | ...
 * +---+---+---+---+-----+---+-------
 *
 * N - amount of light sources
 * [0...(K)] - indicies of the lights 
 * The Capacity (K) is equal for each Tile and is the number of overall light sources.
 * This avoids the need for an atomic counter to reserve a unique memory-amount 
 * for each tile.
 * This avoids the need for Indice pointers in a seperate texture/buffer.
 *
 * [0] Since GLSL doesn't have pointer types, pointer structures are implemented as indices into 
 * array elements (buffers).
 */
layout (std430, binding = 1) buffer VisibleLightIndicesBuffer {
    int visibleLightIndices[];
};

/**
 * @brief positions of the lines for debugging
 * position as 4d vector as homogene coordinates.
 * For debugging purpose only
 */
layout (std430, binding = 2) buffer DebugPositionsBuffer {
    vec4 debugPositions[];
};

/**
 * @brief colors of the lines for debugging
 * colors as 4D vectoren as typical RGBA
 * For debugging purpose only
 */
layout (std430, binding = 3) buffer DebugColorsBuffer{
    vec4 debugColors[];
};

// transformation from clipping to worldspace
uniform mat4 InverseViewProjectionMatrix;      
// transformation from world to viewspace
uniform mat4 ViewMatrix;
// size of the framebuffer
uniform ivec2 FramebufferSize;
// size of a tile
uniform ivec2 TileSize;
// flag if debug grid data should be calculated
uniform bool UpdateGrid;

// ----------------------------------------------------------------------------
//
// Shared Variables
//
// ----------------------------------------------------------------------------

// Origin to define the plane sides
shared vec3 planes_origins[NUM_FRUSTUM_SIDES];
// Normalen to define the plane sides
shared vec3 planes_normals[NUM_FRUSTUM_SIDES];
// amount of lights in the current tile
shared int numVisibleLights;

// ----------------------------------------------------------------------------
//
// Functions
//
// ----------------------------------------------------------------------------

/**
 * @brief W-Division
 *
 * Calculates w-division for a 4d vector
 *
 * @param v      input vector
 *
 * @return vec3 with w-division applied
 */
vec3 wdiv(vec4 v) {
    return v.xyz / v.w;
}


/**
 * @brief Calculat the normal of a plane
 *
 * The 3 given points define the plane 
 *
 * @param center    Vertex in the middle (between v1 and v2)
 * @param v1        Vertex CCW, seen from the front
 * @param v2        Vertex CW, seen from the front
 *
 * @return Normal of the plane, defined by the 3 given points
 */
vec3 normalOfPlane(vec3 center, vec3 v1, vec3 v2) {
    vec3 e1 = v1 - center;
    vec3 e2 = v2 - center;

    return normalize(cross(e1, e2));
}

void main() {
    // get tile position based on workgroupi
    uvec2 tilePosition = uvec2(gl_WorkGroupID.xy);
    // get amount of tiles
    uvec2 numTiles     = uvec2(gl_NumWorkGroups.xy);
    uint linearWorkGroupIndex = uint(numTiles.x*tilePosition.y + tilePosition.x);

    // only run the following code in the first invocation
    if (gl_LocalInvocationID.x == 0) {
        numVisibleLights = 0;

        // border of the tile in clipping space
        float ndcLeft         = 2*(float(TileSize* tilePosition.x)      / FramebufferSize.x) - 1;
        float ndcBottom       = 2*(float(TileSize* tilePosition.y)      / FramebufferSize.y) - 1;
        float ndcRight        = 2*(float(TileSize*(tilePosition.x + 1)) / FramebufferSize.x) - 1;
        float ndcTop          = 2*(float(TileSize*(tilePosition.y + 1)) / FramebufferSize.y) - 1;

        // corner points of the frustum in the back
        vec3 leftBottom       = wdiv(InverseViewProjectionMatrix*vec4(ndcLeft , ndcBottom, 0, 1));
        vec3 rightBottom      = wdiv(InverseViewProjectionMatrix*vec4(ndcRight, ndcBottom, 0, 1));
        vec3 leftTop          = wdiv(InverseViewProjectionMatrix*vec4(ndcLeft , ndcTop   , 0, 1));
        vec3 rightTop         = wdiv(InverseViewProjectionMatrix*vec4(ndcRight, ndcTop   , 0, 1));

        // corner points of the frustum in the front
        vec3 leftBottomFront  = wdiv(InverseViewProjectionMatrix*vec4(ndcLeft , ndcBottom, 1, 1));
        vec3 rightBottomFront = wdiv(InverseViewProjectionMatrix*vec4(ndcRight, ndcBottom, 1, 1));
        vec3 leftTopFront     = wdiv(InverseViewProjectionMatrix*vec4(ndcLeft , ndcTop   , 1, 1));
        vec3 rightTopFront    = wdiv(InverseViewProjectionMatrix*vec4(ndcRight, ndcTop   , 1, 1));

        // calculate the plane
        planes_origins[0] = leftBottom;
        planes_normals[0] = normalOfPlane(leftBottom, leftBottomFront, rightBottomFront);
        planes_origins[1] = rightBottom;
        planes_normals[1] = normalOfPlane(rightBottom, rightBottomFront, rightTopFront);
        planes_origins[2] = rightTop;
        planes_normals[2] = normalOfPlane(rightTop, rightTopFront, leftTopFront);
        planes_origins[3] = leftTop;
        planes_normals[3] = normalOfPlane(leftTop, leftTopFront, leftBottomFront);

#ifdef DEBUGGING
        // only debugging-information
        if (UpdateGrid) {
            for (int i = 0; i < NUM_DEBUG_POSITIONS; i++) {
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + i] = vec4(0, 0, 0, 1);
                debugColors[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + i] = vec4(1, 1, 1, 1);
            }

            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  0] = vec4(leftBottom, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  1] = vec4(rightBottom, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  2] = vec4(rightBottom, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  3] = vec4(rightTop, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  4] = vec4(rightTop, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  5] = vec4(leftTop, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  6] = vec4(leftTop, 1);
            debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) +  7] = vec4(leftBottom, 1);

            if (tilePosition.x == 25 && tilePosition.y == 25) {
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+0] = vec4(leftBottomFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+1] = vec4(rightBottomFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+2] = vec4(rightBottomFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+3] = vec4(rightTopFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+4] = vec4(rightTopFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+5] = vec4(leftTopFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+6] = vec4(leftTopFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+7] = vec4(leftBottomFront, 1);

                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+0] = vec4(leftBottom, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+1] = vec4(rightBottomFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+2] = vec4(rightBottom, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+3] = vec4(rightTopFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+4] = vec4(rightTop, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+5] = vec4(leftTopFront, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+6] = vec4(leftTop, 1);
                debugPositions[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 16+7] = vec4(leftBottomFront, 1);

                for (int i = 0; i < NUM_DEBUG_POSITIONS-8; i++) {
                    debugColors[NUM_DEBUG_POSITIONS*(linearWorkGroupIndex) + 8+i] = vec4(1, 1, 0, 1);
                }
            }
        }
#endif
    }

    // wait for all local invocation to reach this point
    barrier();

    // ----------------------------------------------------------------------------
    // ----------------------------------------------------------------------------

    //
    // calculate culling for each light in parallel
    //
    PointLight light = lights[gl_LocalInvocationID.x];

    vec4 viewPosition = ViewMatrix*vec4(light.position, 1);
    float zDistance = -wdiv(viewPosition).z;

    bool centerInside = true;
    bool inRange = true;
    for (int i = 0; i < NUM_FRUSTUM_SIDES; ++i) {
        vec3 diff = light.position - planes_origins[i];
        float distance = dot(diff, planes_normals[i]);

        // if light is behind the camera
        if (zDistance < -light.radius) {
            inRange = false;
        }

        // center of the light is not in the frustum
        if (distance > 0) {
            centerInside = false;
        }

        // light is so far distant that it doesn't influence the frustum
        if (distance > light.radius) {
            inRange = false;
        }
    }

    if (centerInside || inRange) {
        int index = atomicAdd(numVisibleLights, 1);
        visibleLightIndices[(NUM_LIGHTS + 1)*linearWorkGroupIndex + 1 + index] = int(gl_LocalInvocationID.x);
    }

    barrier();

    // ----------------------------------------------------------------------------
    // ----------------------------------------------------------------------------

    //
    // The first invocation writes the amount of lights influencing the tile into the buffer
    //
    if (gl_LocalInvocationID.x == 0) {
        // write amount of lights for tile in buffer
        visibleLightIndices[(NUM_LIGHTS + 1)*linearWorkGroupIndex] = numVisibleLights;
    }
}
